openapi: 3.0.0
info:
  version: "1"
  title: Inventory
servers:
  ### TODO
  #- url: http://l.ebay-inventory/openapi/Inventory/v1
  #- url: http://localhost:8001/openapi/Inventory/v1
  #- url: http://localhost:8082/openapi/Inventory/v1
  - url: http://ebay-p-inventory/openapi/Inventory/v1
  - url: http://ebay-r-inventory/openapi/Inventory/v1
tags:
  - name: Inventory
  - name: Catalog
  - name: Marketplace
  - name: Management
  - name: ProductForSelling
paths:
  /inventory/aggregate:
    get:
      tags:
        - Inventory
      parameters:
        - name: rid
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: mln
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: List of aggregated inventory items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregateProductCollectionResponse'
  /productForSelling:
    post:
      tags:
        - ProductForSelling
      operationId: createProductForSelling
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductForSellingRequest"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductForSellingResponse"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - ProductForSelling
      operationId: updateProductForSelling
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductForSellingRequest"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductForSellingResponse"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /productForSelling/bulk:
    post:
      tags:
        - ProductForSelling
      operationId: bulkCreateProductForSelling
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductForSellingBulkRequest"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductForSellingBulkResponse"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - ProductForSelling
      operationId: bulkUpdateProductForSelling
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductForSellingBulkRequest"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductForSellingBulkResponse"
  /inventory/catalog/{rid}/generalData:
    get:
      tags:
        - Catalog
      parameters:
        - name: rid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralData'
        500:
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Catalog
      parameters:
        - name: rid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralData'
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralData'
        500:
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/catalog/{rid}:
    get:
      tags:
        - Catalog
      parameters:
        - name: rid
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - generalData
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductResponse'
    patch:
      tags:
        - Catalog
      parameters:
        - name: rid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogProductItem'
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductResponseItem'
  /inventory/catalog:
    get:
      tags:
        - Catalog
      parameters:
        - name: rid
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: include
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - generalData
        - name: limit
          in: query
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: sortField
          in: query
          required: false
          schema:
            type: string
          description: default "updatedAt"
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
          description: default "DESC"
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductCollectionResponse'
  /inventory/management/{mln}:
    get:
      tags:
        - Management
      parameters:
        - name: mln
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementProductResponse'
  /inventory/management:
    get:
      tags:
        - Management
      parameters:
        - name: mln
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: rid
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementCollectionResponse'
components:
  schemas:
    ### RESPONSE GENERAL STRUCTURE ###
    SuccessResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      properties:
        data:
          type: object
    ErrorResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      type: object
      required:
        - level
        - text
      properties:
        level:
          type: string
          description: 'Message level  (like in a logger)'
          example: 'error'
        text:
          type: string
          description: 'Message text'
          example: 'Something wrong.'
        context:
          type: array
          description: 'Message context (like in a logger)'
          items:
            type: string
    PaginatedMetaResponse:
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/PaginatedMeta"
    PaginatedMeta:
      type: object
      properties:
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
    CollectionResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
        - $ref: "#/components/schemas/PaginatedMetaResponse"


    ### RESPONSE CONCRETE
    AggregateProductCollectionResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionResponse"
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AggregateProduct"
    CatalogProductCollectionResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionResponse"
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CatalogProductResponseItem"
    CatalogProductResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
      properties:
        data:
          $ref: "#/components/schemas/CatalogProductResponseItem"
    ManagementCollectionResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/CollectionResponse"
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ManagementProductResponseItem"
    ManagementProductResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
      properties:
        data:
          $ref: "#/components/schemas/ManagementProductResponseItem"

    ### REQUEST CONCRETE ###
    CatalogProductRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/CatalogProduct'

    ### CONCRETE ENTITY ITEM
    CatalogProductResponseItem:
      type: object
      nullable: true
      allOf:
        - $ref: '#/components/schemas/CatalogProductItem'
        - $ref: '#/components/schemas/WithGeneralData'
        - $ref: '#/components/schemas/EntityDates'
    ManagementProductResponseItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/ManagementProduct'
        - $ref: '#/components/schemas/WithGeneralData'
        - $ref: '#/components/schemas/EntityDates'

    ### ENTITIES GENERAL ###
    EntityDates:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        rid:
          type: string
        quantity:
          type: integer
        price:
          type: number
        priceMin:
          type: number
          nullable: true
        priceMax:
          type: number
          nullable: true
        shippingTemplate:
          type: string
          nullable: true
    WithGeneralData:
      type: object
      properties:
        generalData:
          $ref: '#/components/schemas/GeneralData'
    GeneralData:
      type: object
      properties:
        brand:
          type: string
          nullable: true
        mpn:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        photoUris:
          type: array
          nullable: true
          items:
            type: string

    ### ENTITIES CONCRETE ###
    AggregateProduct:
      type: object
      required:
        - mln
        - rid
      properties:
        mln:
          type: string
        rid:
          type: string
        MarketplaceItem:
          $ref: '#/components/schemas/MarketplaceProduct'
        CatalogItem:
          $ref: '#/components/schemas/CatalogProduct'
        ManagementItem:
          $ref: '#/components/schemas/ManagementProduct'
    MarketplaceProduct:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
      properties:
        mln:
          type: string
        msin:
          type: string
          nullable: true
        listingId:
          type: integer
        status:
          type: string
          enum:
            - active
            - inactive
        startTime:
          type: string
          format: dateTime
        endTime:
          type: string
          format: dateTime
        quantitySold:
          type: integer
        categoryId:
          type: integer
        generalData:
          $ref: "#/components/schemas/GeneralData"
    ManagementProduct:
      type: object
      properties:
        mln:
          type: string
        rid:
          type: string
        tags:
          type: array
          items:
            type: string
        comments:
          type: array
          items:
            #todo
            type: string
        rent:
          type: number
          format: float
          nullable: true
        rent_fixed:
          type: number
          format: float
          nullable: true
    CatalogProductItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - $ref: '#/components/schemas/CatalogProduct'
    CatalogProduct:
      type: object
      #allOf:
      #  - $ref: '#/components/schemas/Product'
      properties:
        active:
          type: boolean
        priceType:
          type: string
          nullable: true
        profit:
          type: number
          nullable: true
        #todo
        formula:
          type: string
          nullable: true
        #todo
        formulaMin:
          type: string
          nullable: true
        #todo
        checkedAt:
          type: string
          format: dateTime
        generalData:
          $ref: "#/components/schemas/GeneralData"
        priceZeroProfit:
          type: number
          nullable: true
        info:
          type: object
          nullable: true
          additionalProperties: true
        autoAcceptPrice:
          type: number
          nullable: true


    ProductForSelling:
      type: object
      properties:
        mln:
          type: string
        rid:
          type: string
        msin:
          type: string
          nullable: true
        quantity:
          type: integer
        price:
          type: number
        price_min:
          type: number
        price_max:
          type: number
        category_id:
          type: number
        shipping_template:
          type: string
        #        start_time:
        #          type: string
        #          format: date
        #        end_time:
        #          type: string
        #          format: date
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        photo_uris:
          type: string
        brand:
          type: string
          nullable: true
        mpn:
          type: string
          nullable: true
        problems:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - pending
            - in_progress
            - done
            - error
            - new
        best_offer_price:
          type: number
        return_profile_name:
          type: string
        location:
          type: string
    CreateProductForSellingRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductForSelling"
      required:
        - mln
        - rid
    UpdateProductForSellingRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductForSelling"
      required:
        - mln
    ProductForSellingResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
      properties:
        data:
          $ref: '#/components/schemas/ProductForSellingResponseItem'
    ProductForSellingResponseItem:
      type: object
      allOf:
        - $ref: "#/components/schemas/ProductForSelling"
        - $ref: "#/components/schemas/EntityDates"
    CreateProductForSellingBulkRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateProductForSellingRequest'
      required:
        - items
    ProductForSellingBulkResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductForSellingResponseItem'
    UpdateProductForSellingBulkRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UpdateProductForSellingRequest'
      required:
        - items