openapi: 3.0.0
info:
  version: "1"
  title: "AmazonProductUpdate"
  description: "Generated by Manifests generator v1.5.3. Partially updates one or multiple Amazon product records by SKU, including multilocation availability."
servers:
  - url: http://amz-orders-ngx/openapi/AmazonProductUpdate/v1
  - url: http://host.docker.internal:8280/openapi/AmazonProductUpdate/v1
  - url: http://localhost:8280/openapi/AmazonProductUpdate/v1
tags:
  - name: Products

paths:
  /products/update:
    post:
      tags:
        - Products
      summary: "Partially update one or more Amazon product records"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductsRequest"
      responses:
        "200":
          description: "Products updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductResult"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResult"

components:
  schemas:
    UpdateProductsRequest:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: List of products to update
          items:
            $ref: '#/components/schemas/ProductUpdateItem'

    ProductUpdateItem:
      type: object
      required:
        - sku
      properties:
        sku:
          type: string
          description: Product SKU used to identify the item on Amazon
          example: "002438"
        price:
          type: number
          format: float
          description: Direct price for the product, optional if using pricing rules
          example: 14.95
        quantity:
          type: integer
          description: Available product quantity. Not used when set warehouses property!
          example: 10
        minPrice:
          type: number
          format: float
          description: Minimum allowed price for the product
          example: 9.00
        maxPrice:
          type: number
          format: float
          description: Maximum allowed price for the product
          example: 19.10
        mapPrice:
          type: number
          format: float
          description: Minimum advertised price. Remove from amazon when is not set
          example: 13.00
        productType:
          type: string
          description: Amazon product type (e.g., "BOOKS", "TOYS", "ELECTRONICS")
          example: "TOYS"
          default: "PRODUCT"
        shipTemplate:
          type: string
          description: Shipping template assigned to the product (use `multilocation` to enable per-location quantity)
          example: "TFT_DS_NV-TX_multi_2025-03-13"
        warehouses:
          type: array
          description: Required only if shipTemplate = multilocation
          items:
            $ref: '#/components/schemas/WarehousesItem'
    WarehousesItem:
      type: object
      required:
        - warehouseId
      properties:
        warehouseId:
          type: string
          description: Unique identifier of the warehouse
          example: "05fa3c53-df62-4195-861a-8f369a3fbccd"
        quantity:
          type: integer
          description: Quantity of product available in this warehouse
          example: 10
        handlingDays:
          type: integer
          description: Days needed to ship from this warehouse
          example: 1

    UpdateProductResult:
      allOf:
        - $ref: '#/components/schemas/SuccessResult'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UpdateProductResultItem'

    UpdateProductResultItem:
      type: object
      required:
        - sku
        - submissionId
      properties:
        sku:
          type: string
          description: Product SKU
          example: "002438"
        submissionId:
          type: string
          description: Update status
          example: "success"

    ErrorResult:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
      description: "Message field is not required"

    Message:
      type: object
      properties:
        level:
          type: string
          description: 'Message level (like in a logger)'
          enum: [emergency, alert, critical, error, warning, notice, info, debug]
        type:
          type: string
          description: "Message type for error classification"
          enum: [UNDEFINED, LOGGER_MESSAGE]
        text:
          type: string
          description: "Message describing what went wrong"

    SuccessResult:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          type: object
